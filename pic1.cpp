#include<bits/stdc++.h>
#define Pi 3.1415926
using namespace std;
struct nodd{
	int ze,ll,cc;
};
struct node{
	int dcl,dc;
	nodd ac[63];
	int xia=0;
}xy[1030],xcr[1030],xcb[1030];
uint8_t a[200000],p[200000];
int yin[16]={0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767};
int dui[32768]={};
int Q_Y[8][8]={16,11,10,16,24,40,51,61,12,12,14,19,26,58,60,55,14,13,16,24,40,57,69,56,14,17,22,29,51,87,80,62,18,22,37,56,68,109,103,77,24,35,55,64,81,104,113,92,49,64,78,87,103,121,120,101,72,92,95,98,112,100,103,99};
int Q_C[8][8]={17,18,24,47,99,99,99,99,18,21,26,66,88,99,99,99,24,26,56,99,99,99,99,99,47,66,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99};
double y[300][300],cr[300][300],cb[300][300];
int yy[66000],ycr[66000],ycb[66000];
int toty,totcr,totcb;
int tot;
double c(int x)
{
	if(x==0)return sqrt(0.125);
	else return sqrt(0.25);
}
int zz(double x){return (int)(x+0.5);}//取整
void dct(int x,int fr,int er,int fc,int ec)//DCT变换 量化 Zigzag排列 差分处理
{
	int k=fr,l=fc;//调整k,l顺序实现Zigzag排列
	bool flag=1;
	if(x==1)
	{
		while(k+l!=er+ec+1)
		{
			/* DCT 变换 */
				double sum=0,p1,p2;
				for(int u=fr;u<er;u++)
				{
					for(int v=fc;v<ec;v++)
					{
						p1=cos(((2*u+1)*k*Pi)/16.0);
						p2=cos(((2*v+1)*l*Pi)/16.0);
						sum+=c(u)*c(v)*y[u][v]*p1*p2/4;
					}
				}
				
			yy[toty++]=zz(sum/Q_Y[k-fr][l-fc]);//量化
			if(k==fr&&l==fc)yy[toty-1]-=yy[toty-65];//差分
			if(flag)k--,l++;
			else k++,l--;
			if(k<fr)flag=-flag,k++;
			else if(l<fc)flag=-flag,l++;
			if(k>er)flag=-flag,k--,l+=2;
			else if(l>ec)flag=-flag,k+=2,l--;
		}
	}
	else if(x==2)
	{
		while(k+l!=er+ec+1)
		{
				double sum=0,p1,p2;
				for(int u=fr;u<er;u++)
				{
					for(int v=fc;v<ec;v++)
					{
						p1=cos(((2*u+1)*k*Pi)/16.0);
						p2=cos(((2*v+1)*l*Pi)/16.0);
						sum+=c(u)*c(v)*cr[u][v]*p1*p2/4;
					}
				}
			ycr[totcr++]=zz(sum/Q_C[k-fr][l-fc]);
			if(k==fr&&l==fc)ycr[totcr-1]-=ycr[totcr-65];
			if(flag)k--,l++;
			else k++,l--;
			if(k<fr)flag=-flag,k++;
			else if(l<fc)flag=-flag,l++;
			if(k>er)flag=-flag,k--,l+=2;
			else if(l>ec)flag=-flag,k+=2,l--;
		}
	}
	else if(x==3)
	{
		while(k+l!=er+ec+1)
		{
				double sum=0,p1,p2;
				for(int u=fr;u<er;u++)
				{
					for(int v=fc;v<ec;v++)
					{
						p1=cos(((2*u+1)*k*Pi)/16.0);
						p2=cos(((2*v+1)*l*Pi)/16.0);
						sum+=c(u)*c(v)*cb[u][v]*p1*p2/4;
					}
				}
			ycb[totcb++]=zz(sum/Q_C[k-fr][l-fc]);
			if(k==fr&&l==fc)ycb[totcb-1]-=ycb[totcb-65];
			if(flag)k--,l++;
			else k++,l--;
			if(k<fr)flag=-flag,k++;
			else if(l<fc)flag=-flag,l++;
			if(k>er)flag=-flag,k--,l+=2;
			else if(l>ec)flag=-flag,k+=2,l--;
		}
	}
}
void code()
{
	for(int k=0;k<32;k++)//32行
	{
		for(int o=0;o<32;o++)//32列
		{
			/* 8*8像素块的DCT */
			int fr=k*8,er=fr+8,fc=o*8,ec=fc+8;
			dct(1,fr,er,fc,ec);
			dct(2,fr,er,fc,ec);
			dct(3,fr,er,fc,ec);
		}
	}
}
void you()//yy->xy 游程编码
{
	int i=1;
	int flag=0;
	if(yy[0]==0) xy[1].dcl=yy[0],xy[1].dc=0;
	else if(yy[0]<0) xy[1].dcl=dui[-yy[0]],xy[1].dc=yin[dui[-yy[0]]]+yy[0];
	else xy[1].dcl=dui[yy[0]],xy[1].dc=yy[0];
	while(i<65536)
	{
		int k=i/64+1;
		if(i%64==0)//每64个一个方阵
		{
			flag=0;
			xy[k-1].ac[++xy[k-1].xia].ze=0;
			xy[k-1].ac[xy[k-1].xia].ll=0;
			xy[k-1].ac[xy[k-1].xia].cc=0;
			if(yy[i]==0) 
			{
				xy[k].dc=0;
				xy[k].dcl=0;
			}
			else if(yy[i]<0) 
			{
				xy[k].dcl=dui[-yy[i]];
				xy[k].dc=yin[dui[-yy[i]]]+yy[i];
			}
			else 
			{
				xy[k].dcl=dui[yy[i]];
				xy[k].dc=yy[i];
			}
		}
		else if(yy[i]==0)flag++;
		else if(yy[i]!=0)
		{
			while(flag>15) 
			{
				xy[k].ac[++xy[k].xia].ze=15;
				xy[k].ac[xy[k].xia].ll=0;
				xy[k].ac[xy[k].xia].cc=0;
				flag-=15;
			}
			xy[k].ac[++xy[k].xia].ze=flag;
			if(yy[i]<0) 
			{
				xy[k].ac[xy[k].xia].ll=dui[-yy[i]];
				xy[k].ac[xy[k].xia].cc=yin[dui[-yy[i]]]+yy[i];
			}
			else 
			{
				xy[k].ac[xy[k].xia].ll=dui[yy[i]];
				xy[k].ac[xy[k].xia].cc=yy[i];
			}
			flag=0;
		}
		i++;
	}
	xy[1024].ac[++xy[1024].xia].ze=0;
	xy[1024].ac[xy[1024].xia].ll=0;
	xy[1024].ac[xy[1024].xia].cc=0;
	
	i=0,flag=0;
	if(ycr[0]==0) xcr[1].dcl=ycr[0],xcr[1].dc=0;
	else if(ycr[0]<0) xcr[1].dcl=dui[-ycr[0]],xcr[1].dc=yin[dui[-ycr[0]]]+ycr[0];
	else xcr[1].dcl=dui[ycr[0]],xcr[1].dc=ycr[0];
	while(i<65536)
	{
		int k=i/64+1;
		if(i%64==0)//每64个一个方阵
		{
			flag=0;
			xcr[k-1].ac[++xcr[k-1].xia].ze=0;
			xcr[k-1].ac[xcr[k-1].xia].ll=0;
			xcr[k-1].ac[xcr[k-1].xia].cc=0;
			if(ycr[i]==0) 
			{
				xcr[k].dc=0;
				xcr[k].dcl=0;
			}
			else if(ycr[i]<0) 
			{
				xcr[k].dcl=dui[-ycr[i]];
				xcr[k].dc=yin[dui[-ycr[i]]]+ycr[i];
			}
			else 
			{
				xcr[k].dcl=dui[ycr[i]];
				xcr[k].dc=ycr[i];
			}
		}
		else if(ycr[i]==0)flag++;
		else if(ycr[i]!=0)
		{
			while(flag>15) 
			{
				xcr[k].ac[++xcr[k].xia].ze=15;
				xcr[k].ac[xcr[k].xia].ll=0;
				xcr[k].ac[xcr[k].xia].cc=0;
				flag-=15;
			}
			xcr[k].ac[++xcr[k].xia].ze=flag;
			if(ycr[i]<0) 
			{
				xcr[k].ac[xcr[k].xia].ll=dui[-ycr[i]];
				xcr[k].ac[xcr[k].xia].cc=yin[dui[-ycr[i]]]+ycr[i];
			}
			else 
			{
				xcr[k].ac[xcr[k].xia].ll=dui[ycr[i]];
				xcr[k].ac[xcr[k].xia].cc=ycr[i];
			}
			flag=0;
		}
		i++;
	}
	xcr[1024].ac[xcr[1024].xia].ze=0;
	xcr[1024].ac[xcr[1024].xia].ll=0;
	xcr[1024].ac[xcr[1024].xia].cc=0;
	
	i=0,flag=0;
	if(ycb[0]==0) xcb[1].dcl=ycb[0],xcb[1].dc=0;
	else if(ycb[0]<0) xcb[1].dcl=dui[-ycb[0]],xcb[1].dc=yin[dui[-ycb[0]]]+ycb[0];
	else xcb[1].dcl=dui[ycb[0]],xcb[1].dc=ycb[0];
	while(i<65536)
	{
		int k=i/64+1;
		if(i%64==0)//每64个一个方阵
		{
			flag=0;
			xcb[k-1].ac[++xcb[k-1].xia].ze=0;
			xcb[k-1].ac[xcb[k-1].xia].ll=0;
			xcb[k-1].ac[xcb[k-1].xia].cc=0;
			if(ycb[i]==0) 
			{
				xcb[k].dc=0;
				xcb[k].dcl=0;
			}
			else if(ycb[i]<0) 
			{
				xcb[k].dcl=dui[-ycb[i]];
				xcb[k].dc=yin[dui[-ycb[i]]]+ycb[i];
			}
			else 
			{
				xcb[k].dcl=dui[ycb[i]];
				xcb[k].dc=ycb[i];
			}
		}
		else if(ycb[i]==0)flag++;
		else if(ycb[i]!=0)
		{
			while(flag>15) 
			{
				xcb[k].ac[++xcb[k].xia].ze=15;
				xcb[k].ac[xcb[k].xia].ll=0;
				xcb[k].ac[xcb[k].xia].cc=0;
				flag-=15;
			}
			xcb[k].ac[++xcb[k].xia].ze=flag;
			if(ycb[i]<0) 
			{
				xcb[k].ac[xcb[k].xia].ll=dui[-ycb[i]];
				xcb[k].ac[xcb[k].xia].cc=yin[dui[-ycb[i]]]+ycb[i];
			}
			else 
			{
				xcb[k].ac[xcb[k].xia].ll=dui[ycb[i]];
				xcb[k].ac[xcb[k].xia].cc=ycb[i];
			}
			flag=0;
		}
		i++;
	}
	xcb[1024].ac[++xcb[1024].xia].ze=0;
	xcb[1024].ac[xcb[1024].xia].ll=0;
	xcb[1024].ac[xcb[1024].xia].cc=0;
}
string yd[12]={"00","010","011","100","101","110","1110","11110","111110","1111110","11111110","111111110"};
string cd[12]={"00","01","10","110","1110","11110","111110","1111110","11111110","111111110","1111111110","11111111110"};
string ya[162]={"1010","00","01","100","1011","11010","1111000","11111000","1111110110","1111111110000010","1111111110000011","1100","11011","1111001","111110110","11111110110","1111111110000100","1111111110000101","1111111110000110","1111111110000111","1111111110001000","11100","11111001","1111110111","111111110100","1111111110001001","1111111110001010","1111111110001011","1111111110001100","1111111110001101","1111111110001110","111010","111110111","111111110101","1111111110001111","1111111110010000","1111111110010001","1111111110010010","1111111110010011","1111111110010100","1111111110010101","111011","1111111000","1111111110010110","1111111110010111","1111111110011000","1111111110011001","1111111110011010","1111111110011011","1111111110011100","1111111110011101","1111010","11111110111","1111111110011110","1111111110011111","1111111110100000","1111111110100001","1111111110100010","1111111110100011","1111111110100100","1111111110100101","1111011","111111110110","1111111110100110","1111111110100111","1111111110101000","1111111110101001","1111111110101010","1111111110101011","1111111110101100","1111111110101101","11111010","111111110111","1111111110101110","1111111110101111","1111111110110000","1111111110110001","1111111110110010","1111111110110011","1111111110110100","1111111110110101","111111000","111111111000000","1111111110110110","1111111110110111","1111111110111000","1111111110111001","1111111110111010","1111111110111011","1111111110111100","1111111110111101","111111001","1111111110111110","1111111110111111","1111111111000000","1111111111000001","1111111111000010","1111111111000011","1111111111000100","1111111111000101","1111111111000110","111111010","1111111111000111","1111111111001000","1111111111001001","1111111111001010","1111111111001011","1111111111001100","1111111111001101","1111111111001110","1111111111001111","1111111001","1111111111010000","1111111111010001","1111111111010010","1111111111010011","1111111111010100","1111111111010101","1111111111010110","1111111111010111","1111111111011000","1111111010","1111111111011001","1111111111011010","1111111111011011","1111111111011100","1111111111011101","1111111111011110","1111111111011111","1111111111100000","1111111111100001","11111111000","1111111111100010","1111111111100011","1111111111100100","1111111111100101","1111111111100110","1111111111100111","1111111111101000","1111111111101001","1111111111101010","1111111111101011","1111111111101100","1111111111101101","1111111111101110","1111111111101111","1111111111110000","1111111111110001","1111111111110010","1111111111110011","1111111111110100","11111111001","1111111111110101","1111111111110110","1111111111110111","1111111111111000","1111111111111001","1111111111111010","1111111111111011","1111111111111100"};
//Y的AC
string ca[162]={"00","01","100","1010","11000","11001","111000","1111000","111110100","1111110110","111111110100","1011","111001","11110110","111110101","11111110110","111111110101","1111111110001000","1111111110001001","1111111110001010","1111111110001011","11010","11110111","1111110111","111111110110","111111111000010","1111111110001100","1111111110001101","1111111110001110","1111111110001111","1111111110010000","11011","11111000","1111111000","111111110111","1111111110010001","1111111110010010","1111111110010011","1111111110010100","1111111110010101","1111111110010110","111010","111110110","1111111110010111","1111111110011000","1111111110011001","1111111110011010","1111111110011011","1111111110011100","1111111110011101","1111111110011110","111011","1111111001","1111111110011111","1111111110100000","1111111110100001","1111111110100010","1111111110100011","1111111110100100","1111111110100101","1111111110100110","1111001","11111110111","1111111110100111","1111111110101000","1111111110101001","1111111110101010","1111111110101011","1111111110101100","1111111110101101","1111111110101110","1111010","11111111000","1111111110101111","1111111110110000","1111111110110001","1111111110110010","1111111110110011","1111111110110100","1111111110110101","1111111110110110","11111001","1111111110110111","1111111110111000","1111111110111001","1111111110111010","1111111110111011","1111111110111100","1111111110111101","1111111110111110","1111111110111111","111110111","1111111111000000","1111111111000001","1111111111000010","1111111111000011","1111111111000100","1111111111000101","1111111111000110","1111111111000111","1111111111001000","111111000","1111111111001001","1111111111001010","1111111111001011","1111111111001100","1111111111001101","1111111111001110","1111111111001111","1111111111010000","1111111111010001","111111001","1111111111010010","1111111111010011","1111111111010100","1111111111010101","1111111111010110","1111111111010111","1111111111011000","1111111111011001","1111111111011010","111111010","1111111111011011","1111111111011100","1111111111011101","1111111111011110","1111111111011111","1111111111100000","1111111111100001","1111111111100010","1111111111100011","11111111001","1111111111100100","1111111111100101","1111111111100110","1111111111100111","1111111111101000","1111111111101001","1111111111101010","1111111111101011","1111111111101100","11111111100000","1111111111101101","1111111111101110","1111111111101111","1111111111110000","1111111111110001","1111111111110010","1111111111110011","1111111111110100","1111111111110101","1111111010","111111111000011","1111111111110110","1111111111110111","1111111111111000","1111111111111001","1111111111111010","1111111111111011","1111111111111100"};
//C的AC
string gou(int l,int zhi)
{
	string q="";
	//cout<<l<<" "<<zhi<<"@"<<endl;
	while(zhi)
	{
		if(zhi%2)q=q+"1";
		else q=q+"0";
		zhi/=2;
		l--;
	}
	while(l)
	{
		q="0"+q;
		l--;
	}
	return q;
}
string cun;
void ping(string s)
{
	string ss=cun+s;
	int ans=0;
	int l=ss.length(),b=0;//b是指针
	while(b+8<l)
	{
		for(int i=b;i<b+8;i++)
		{
			ans*=2;
			if(ss[i]=='1')ans+=1;
		}
		p[tot++]=ans;
		ans=0;
		b+=8;
	}
	cun=ss.substr(b);
}
void Huffman()
{
	for(int i=1;i<1025;i++)//处理xy[i]
	{
		ping(yd[xy[i].dcl]);
		ping(gou(xy[i].dcl,xy[i].dc));
		int j=1;
		while(j<=xy[i].xia)
		{
			ping(ya[xy[i].ac[j].ze*10+xy[i].ac[j].ll]);
			ping(gou(xy[i].ac[j].ll,xy[i].ac[j].cc));
			j++;
		}
		
		ping(cd[xcb[i].dcl]);
		ping(gou(xcb[i].dcl,xcb[i].dc));
		j=1;
		while(j<=xcb[i].xia)
		{
			ping(ca[xcb[i].ac[j].ze*10+xcb[i].ac[j].ll]);
			ping(gou(xcb[i].ac[j].ll,xcb[i].ac[j].cc));
			j++;
		}
		
		ping(cd[xcr[i].dcl]);
		ping(gou(xcr[i].dcl,xcr[i].dc));
		j=1;
		while(j<=xcr[i].xia)
		{
			ping(ca[xcr[i].ac[j].ze*10+xcr[i].ac[j].ll]);
			ping(gou(xcr[i].ac[j].ll,xcr[i].ac[j].cc));
			j++;
		}
		//cout<<i<<" ";
	}
}
int main()
{
	FILE *fp=fopen("demo.bin","r");
	fread(a,1,192*1024,fp);
	fclose(fp);            
	for(int i=0;i<256;i++)
	for(int j=0;j<256;j++)
	{
		uint8_t r=a[(i*256+j)*3],g=a[(i*256+j)*3+1],b=a[(i*256+j)*3+2];
		//printf("%d %d %d\n",r,g,b);
		/*y[i][j]=0.299*r+0.587*g+0.144*b-128;
		cr[i][j]=0.5*r-0.4187*g-0.0813*b;
		cb[i][j]=-0.1687*r-0.3313*g+0.5*b;*/
		y[i][j]=0.257*r+0.504*g+0.098*b+16-128;
		cr[i][j]=0.439*r-0.368*g-0.071*b;
		cb[i][j]=-0.148*r-0.291*g+0.439*b;
	}
	code();
	you();
	Huffman();
	tot--;
	std::ofstream outF("test11.bin", std::ios::binary);
    outF.write(reinterpret_cast<char*>(p), tot);
    return 0;
}
/*按道理，只剩Huffman编码和文件头了。
另外配置github*/